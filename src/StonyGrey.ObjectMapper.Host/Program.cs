using Domain;

using StonyGrey.ObjectMapper;

using System.Diagnostics;
using System.Text.Json;

[assembly: Map(typeof(Domain.TestMessage), typeof(ProtobufDotNet.TestMessage))]
[assembly: Map(typeof(ProtobufDotNet.TestMessage), typeof(Domain.TestMessage), ContainingNamespaceKind.Destination)]

[assembly: Map(typeof(Domain.TestSubMessage1), typeof(ProtobufDotNet.TestSubMessage1))]
[assembly: Map(typeof(ProtobufDotNet.TestSubMessage1), typeof(Domain.TestSubMessage1), ContainingNamespaceKind.Destination)]

[assembly: Map(typeof(Domain.TestSubMessage2), typeof(ProtobufDotNet.TestSubMessage2))]
[assembly: Map(typeof(ProtobufDotNet.TestSubMessage2), typeof(Domain.TestSubMessage2), ContainingNamespaceKind.Destination)]

[assembly: Map(typeof(Domain.TestSubSubMessage), typeof(ProtobufDotNet.TestSubSubMessage))]
[assembly: Map(typeof(ProtobufDotNet.TestSubSubMessage), typeof(Domain.TestSubSubMessage), ContainingNamespaceKind.Destination)]

[assembly: Map(typeof(Domain.TestStruct), typeof(ProtobufDotNet.TestStruct))]
[assembly: Map(typeof(ProtobufDotNet.TestStruct), typeof(Domain.TestStruct), ContainingNamespaceKind.Destination)]

//[assembly: Map(typeof(Domain.TestMessage), typeof(Domain.TestMessage))]

var testSub2 = new TestSubMessage2() { StringMember = "asdf" };
testSub2.AddValue("ok");

var obj1 = new TestMessage()
{
    StringMember = "abc",
    IntMember = 11,
    OptionalMember = 22,
    OneOfAMember = 33,
    NonOptionalMember = 44,
    DateTimeMember = DateTime.Now,
    GuidMember = Guid.NewGuid(),
    EnumMember = Testing.Two,
    DataMember = new byte[] { 1, 2, 3, 4, 5, 6 },
    OptionalDataMember = new byte[] { 7, 8 },
    TestSubMessageMember = new()
    {
        StringMember = "ok",
        TestSubSubMessageMember = new("read only") { StringMember = "okay" },
    },
    StringsMember = new List<string>() { "a", "b", "c" },
    TestSubMessagesMember = new List<TestSubMessage1> { new TestSubMessage1() { StringMember = "abc" }, new TestSubMessage1() { StringMember = "def", TestSubSubMessageMember = new TestSubSubMessage("read-only") { StringMember = "ghi" } } },
    TestSubMessage2Member = testSub2,
    EnumListMember = new List<Testing>() { Testing.Two },
    NullableEnumMember = Testing.Two,
    TestStructMember = new TestStruct() { StringMember = "asdf"}
};

// MapToProtobuf & MapFromProtobuf were generated by the StonyGrey.ObjectMapper source generator.
// Look for them in StonyGrey.ObjectMapper.Host::Dependencies::Analyzers::StonyGrey.ObjectMapper::StonyGrey.ObjectMapper.MapGenerator
var pbObj1 = obj1.Map();

var obj2 = pbObj1.Map();

var pbObj2 = obj2.Map();

var options = new JsonSerializerOptions { WriteIndented = true };

var obj1json = JsonSerializer.Serialize(obj1, options);
var pbObj1json = JsonSerializer.Serialize(pbObj1, options);
var obj2json = JsonSerializer.Serialize(obj2, options);
var pbObj2json = JsonSerializer.Serialize(pbObj2, options);

File.WriteAllText(Path.Combine(Path.GetTempPath(), $"{nameof(obj1json)}.json"), obj1json);
File.WriteAllText(Path.Combine(Path.GetTempPath(), $"{nameof(pbObj1json)}.json"), pbObj1json);
File.WriteAllText(Path.Combine(Path.GetTempPath(), $"{nameof(obj2json)}.json"), obj2json);
File.WriteAllText(Path.Combine(Path.GetTempPath(), $"{nameof(pbObj2json)}.json"), pbObj2json);

Console.WriteLine($"{nameof(obj1),-10}: {obj1json}{Environment.NewLine}");
Console.WriteLine($"{nameof(pbObj1),-10}: {JsonSerializer.Serialize(pbObj1)}{Environment.NewLine}");
Console.WriteLine($"{nameof(obj2),-10}: {JsonSerializer.Serialize(obj2)}{Environment.NewLine}");
Console.WriteLine($"{nameof(pbObj2),-10}: {JsonSerializer.Serialize(pbObj2)}{Environment.NewLine}");

Debug.Assert(string.Equals($"{JsonSerializer.Serialize(pbObj1)}", $"{JsonSerializer.Serialize(pbObj2)}", StringComparison.Ordinal));
Debug.Assert(string.Equals($"{JsonSerializer.Serialize(obj1)}", $"{JsonSerializer.Serialize(obj2)}", StringComparison.Ordinal));
