using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;

using StonyGrey.ObjectMapper.Configuration;
using StonyGrey.ObjectMapper.Extensions;

using System.CodeDom.Compiler;
using System.Collections.Immutable;
using System.Diagnostics;
using System.Reflection;
using System.Text;

using Targets = System.Collections.Immutable.ImmutableArray<(Microsoft.CodeAnalysis.SyntaxNode node, Microsoft.CodeAnalysis.INamedTypeSymbol source, Microsoft.CodeAnalysis.INamedTypeSymbol destination, StonyGrey.ObjectMapper.MappingContext context)?>;

namespace StonyGrey.ObjectMapper;
internal sealed class MappingBuilder : IDisposable
{
    private readonly Targets _targets;
    private readonly INamedTypeSymbol _source;
    private readonly INamedTypeSymbol _destination;
    private readonly ImmutableArray<IPropertySymbol> _destinationProperties;
    private readonly MappingContext _mappingContext;
    private readonly Compilation _compilation;
    private readonly ConfigurationValues _configurationValues;
    private readonly StringWriter _writer = new();
    private readonly IndentedTextWriter _indentWriter;

    public SourceText Text { get; private set; }

    public MappingBuilder(INamedTypeSymbol source, INamedTypeSymbol destination, ImmutableArray<IPropertySymbol> destinationProperties,
        MappingContext mappingContext, Compilation compilation, ConfigurationValues configurationValues, Targets targets)
    {
        _source = source;
        _destination = destination;
        _destinationProperties = destinationProperties;
        _mappingContext = mappingContext;
        _compilation = compilation;
        _configurationValues = configurationValues;
        _targets = targets;

        _indentWriter = new(_writer, _configurationValues.IndentStyle == IndentStyle.Tab ? "\t" : new string(' ', (int)_configurationValues.IndentSize));

        Text = Build();
    }

    private SourceText Build()
    {
        NamespaceGatherer? namespaces = new();
        var emittedNamespace = false;

        if (_mappingContext.ContainingNamespaceKind != ContainingNamespaceKind.Global)
        {
            if (_mappingContext.ContainingNamespaceKind == ContainingNamespaceKind.Source)
            {
                if (_source.ContainingNamespace.IsGlobalNamespace ||
                    !_source.ContainingNamespace.Contains(_destination.ContainingNamespace))
                {
                    namespaces.Add(_destination.ContainingNamespace);
                }

                if (!_source.ContainingNamespace.IsGlobalNamespace)
                {
                    _indentWriter.WriteLine($"namespace {_source.ContainingNamespace.ToDisplayString()}");
                    _indentWriter.WriteLine("{");
                    _indentWriter.Indent++;
                    emittedNamespace = true;
                }
            }
            else if (_mappingContext.ContainingNamespaceKind == ContainingNamespaceKind.Destination)
            {
                if (_destination.ContainingNamespace.IsGlobalNamespace ||
                    !_destination.ContainingNamespace.Contains(_source.ContainingNamespace))
                {
                    namespaces.Add(_source.ContainingNamespace);
                }

                if (!_destination.ContainingNamespace.IsGlobalNamespace)
                {
                    _indentWriter.WriteLine($"namespace {_destination.ContainingNamespace.ToDisplayString()}");
                    _indentWriter.WriteLine("{");
                    _indentWriter.Indent++;
                    emittedNamespace = true;
                }
            }
        }
        else
        {
            namespaces.Add(_source.ContainingNamespace);
            namespaces.Add(_destination.ContainingNamespace);
        }

        BuildType(namespaces);

        if (emittedNamespace)
        {
            _indentWriter.Indent--;
            _indentWriter.WriteLine("}");
        }
        _indentWriter.WriteLine("");

        var append = $"{Environment.NewLine}#nullable enable{Environment.NewLine}";

        var code = namespaces.Values.Count > 0 ?
            string.Join(Environment.NewLine,
                string.Join(Environment.NewLine, namespaces.Values.Select(_ => $"using {_};")),
                string.Empty, append, string.Empty, _writer.ToString()) :
            string.Join(Environment.NewLine, append, string.Empty, _writer.ToString());

        var name = Assembly.GetExecutingAssembly().GetName();
        code = $"// Generated by {name.Name} v{name.Version} at {DateTime.Now}{Environment.NewLine}{Environment.NewLine}{code}";

        var sourceText = SourceText.From(code, Encoding.UTF8);

        Debug.WriteLine(sourceText);

        return sourceText;
    }

    private void BuildType(NamespaceGatherer namespaces)
    {
        _indentWriter.WriteLine($"public static partial class MappingExtensions");
        _indentWriter.WriteLine("{");
        _indentWriter.Indent++;

        var constructors = _destination.Constructors.Where(_ => _.DeclaredAccessibility == Accessibility.Public ||
            (_destination.ContainingAssembly.ExposesInternalsTo(_compilation.Assembly) && _.DeclaredAccessibility == Accessibility.Friend)).ToArray();

        var imessage = _compilation.GetTypeByMetadataName("Google.Protobuf.IMessage");
        var isProtobufSource = imessage != null && _compilation.ClassifyCommonConversion(_source, imessage).IsImplicit;
        var isProtobufTarget = imessage != null && _compilation.ClassifyCommonConversion(_destination, imessage).IsImplicit;

        for (var i = 0; i < constructors.Length; i++)
        {
            var constructor = constructors[i];

            if (!isProtobufSource && isProtobufTarget)
            {
                if (constructor.Parameters.Length == 0)
                {
                    BuildMapToProtobufExtensionMethod(constructor, namespaces);
                }
            }
            else if (isProtobufSource && !isProtobufTarget)
            {
                BuildMapFromProtobufExtensionMethod(namespaces, constructor);
            }
            else
            {
                BuildMapExtensionMethod(constructor, namespaces);
            }

            if (i < constructors.Length - 1)
            {
                _indentWriter.WriteLine();
            }
        }

        if (isProtobufSource && !isProtobufTarget)
        {
            BuildMapFromProtobufExtensionMethod(namespaces);
        }

        _indentWriter.Indent--;
        _indentWriter.WriteLine("}");
    }

    private void BuildMapExtensionMethod(IMethodSymbol constructor, NamespaceGatherer namespaces)
    {
        var fullyQualifiedSource = _source.FullyQualifiedName();
        var fullyQualifiedDestination = _destination.FullyQualifiedName();

        var parameters = new string[constructor.Parameters.Length + 1];
        parameters[0] = $"this {fullyQualifiedSource} self";

        for (var i = 0; i < constructor.Parameters.Length; i++)
        {
            var parameter = constructor.Parameters[i];
            namespaces.Add(parameter.Type.ContainingNamespace);
            var nullableAnnotation = parameter.NullableAnnotation == NullableAnnotation.Annotated ? "?" : string.Empty;
            var optionalValue = parameter.HasExplicitDefaultValue ? $" = {parameter.ExplicitDefaultValue.GetDefaultValue()}" : string.Empty;
            parameters[i + 1] = $"{parameter.Type.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat)}{nullableAnnotation} {parameter.Name}{optionalValue}";
        }

        _indentWriter.WriteLine($"public static {fullyQualifiedDestination} Map{(_mappingContext.LongName ? ($"To{_destination.Name}") : string.Empty)}({string.Join(", ", parameters)})");
        _indentWriter.WriteLine("{");
        _indentWriter.Indent++;

        if (!_source.IsValueType)
        {
            _indentWriter.WriteLine("var target = self is null ? throw new ArgumentNullException(nameof(self)) :");
            namespaces.Add(typeof(ArgumentNullException));
            _indentWriter.Indent++;
        }

        if (constructor.Parameters.Length == 0)
        {
            _indentWriter.WriteLine($"new {fullyQualifiedDestination}();");
        }
        else
        {
            _indentWriter.WriteLine(
                $"new {fullyQualifiedDestination}({string.Join(", ", constructor.Parameters.Select(_ => _.Name))});");
        }

        _indentWriter.WriteLine();
        _indentWriter.Indent--;

        foreach (var destinationProperty in _destinationProperties)
        {
            if (_source.GetBaseTypesAndThis().SelectMany(n => n.GetMembers(destinationProperty.Name).OfType<IPropertySymbol>()).SingleOrDefault() is not IPropertySymbol sourceProperty)
            {
                // TODO: diagnostics
                continue;
            }

            if (destinationProperty.HasSetter())
            {
                if (sourceProperty.Type.IsAssignableTo(destinationProperty.Type))
                {
                    _indentWriter.WriteLine($"target.{destinationProperty.Name} = self.{destinationProperty.Name};");
                }
                else
                {
                    string? methodName = null;

                    var nullableAnnotation = sourceProperty.NullableAnnotation == NullableAnnotation.Annotated ? "?" : string.Empty;

                    if ((methodName = sourceProperty.GetConversionMethod(destinationProperty)) != null)
                    {
                        _indentWriter.WriteLine($"target.{destinationProperty.Name} = self.{destinationProperty.Name}{nullableAnnotation}.{methodName}();");
                    }
                    else if (destinationProperty.Type.TypeKind == TypeKind.Enum)
                    {
                        _indentWriter.WriteLine($"target.{destinationProperty.Name} = self.{destinationProperty.Name}.MapToEnum<{$"global::{destinationProperty.Type.ContainingNamespace.Name}.{destinationProperty.Type.Name}"}>();");
                    }
                    else
                    {
                        var (s, t) = _targets.Where(e => e.HasValue).Select(e => e!.Value).Where(e => SymbolEqualityComparer.Default.Equals(sourceProperty.Type, e.source) && SymbolEqualityComparer.Default.Equals(destinationProperty.Type, e.destination)).Select(e => (e.source, e.destination)).FirstOrDefault();
                        if (s != null && t != null)
                        {
                            var nullConditional = sourceProperty.Type.IsReferenceType || sourceProperty.NullableAnnotation == NullableAnnotation.Annotated ? "?" : string.Empty;
                            _indentWriter.WriteLine($"target.{destinationProperty.Name} = self.{destinationProperty.Name}{nullConditional}.Map{(_mappingContext.LongName ? ($"To{destinationProperty.Name}") : string.Empty)}();");
                        }
                    }
                }
            }
            else if (sourceProperty.IsEnumerableCollection())
            {
                List<(IPropertySymbol sourceProperty, IPropertySymbol destinationProperty)>? collections = new() { (sourceProperty, destinationProperty) };
                MapCollections(collections, _indentWriter, "target.", string.Empty);
            }
            else
            {
                // TODO: diagnostics

                _indentWriter.WriteLine($"// Can't map {sourceProperty.FullyQualifiedName()} to {destinationProperty.FullyQualifiedName()}.");
            }
        }

        _indentWriter.WriteLine("return target;");

        _indentWriter.Indent--;
        _indentWriter.WriteLine("}");
    }

    private void BuildMapToProtobufExtensionMethod(IMethodSymbol constructor, NamespaceGatherer namespaces)
    {
        var fullyQualifiedSource = _source.FullyQualifiedName();
        var fullyQualifiedDestination = _destination.FullyQualifiedName();

        var parameters = new string[constructor.Parameters.Length + 1];
        parameters[0] = $"this {fullyQualifiedSource} self";

        for (var i = 0; i < constructor.Parameters.Length; i++)
        {
            var parameter = constructor.Parameters[i];
            namespaces.Add(parameter.Type.ContainingNamespace);
            var nullableAnnotation = parameter.NullableAnnotation == NullableAnnotation.Annotated ? "?" : string.Empty;
            var optionalValue = parameter.HasExplicitDefaultValue ? $" = {parameter.ExplicitDefaultValue.GetDefaultValue()}" : string.Empty;
            parameters[i + 1] = $"{parameter.Type.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat)}{nullableAnnotation} {parameter.Name}{optionalValue}";
        }

        _indentWriter.WriteLine($"public static {fullyQualifiedDestination} Map{(_mappingContext.LongName ?  _destination.Name : string.Empty)}({string.Join(", ", parameters)})");
        _indentWriter.WriteLine("{");
        _indentWriter.Indent++;

        if (!_source.IsValueType)
        {
            _indentWriter.WriteLine("var target = self is null ? throw new ArgumentNullException(nameof(self)) :");
            namespaces.Add(typeof(ArgumentNullException));
            _indentWriter.Indent++;
        }

        if (constructor.Parameters.Length == 0)
        {
            _indentWriter.WriteLine($"new {fullyQualifiedDestination}();");
        }
        else
        {
            _indentWriter.WriteLine(
                $"new {fullyQualifiedDestination}({string.Join(", ", constructor.Parameters.Select(_ => _.Name))});");
        }

        _indentWriter.WriteLine();
        _indentWriter.Indent--;

        foreach (var destinationProperty in _destinationProperties)
        {
            if (_source.GetBaseTypesAndThis().SelectMany(n => n.GetMembers(destinationProperty.Name).OfType<IPropertySymbol>()).SingleOrDefault() is not IPropertySymbol sourceProperty)
            {
                // TODO: diagnostics
                continue;
            }

            //
            // Set the property only if it's not already set to the Protobuf default.
            // This ensures proper treatment of 'oneof' fields.
            //
            // https://developers.google.com/protocol-buffers/docs/proto3#default
            // https://developers.google.com/protocol-buffers/docs/proto3#oneof
            //

            if (destinationProperty.HasSetter())
            {
                if (sourceProperty.Type.IsAssignableTo(destinationProperty.Type))
                {
                    if (destinationProperty.Type.IsStringType())
                    {
                        _indentWriter.WriteLine($"if (!string.IsNullOrEmpty(self.{destinationProperty.Name}))");
                        _indentWriter.WriteLine("{");
                        _indentWriter.Indent++;
                        _indentWriter.WriteLine($"target.{destinationProperty.Name} = self.{destinationProperty.Name};");
                        _indentWriter.Indent--;
                        _indentWriter.WriteLine($"}}{Environment.NewLine}");
                    }
                    else
                    {
                        _indentWriter.WriteLine($"if (self.{destinationProperty.Name} != default)");
                        _indentWriter.WriteLine("{");
                        _indentWriter.Indent++;
                        _indentWriter.WriteLine($"target.{destinationProperty.Name} = self.{destinationProperty.Name};");
                        _indentWriter.Indent--;
                        _indentWriter.WriteLine($"}}{Environment.NewLine}");
                    }
                }
                else
                {
                    string? methodName = null;

                    if ((methodName = sourceProperty.GetConversionMethod(destinationProperty)) != null)
                    {
                        _indentWriter.WriteLine($"if (self.{destinationProperty.Name} != default)");
                        _indentWriter.WriteLine("{");
                        _indentWriter.Indent++;
                        var nullConditional = sourceProperty.NullableAnnotation == NullableAnnotation.Annotated ? "?" : string.Empty;
                        _indentWriter.WriteLine($"target.{destinationProperty.Name} = self.{destinationProperty.Name}.{methodName}();");
                        _indentWriter.Indent--;
                        _indentWriter.WriteLine($"}}{Environment.NewLine}");
                    }
                    else if (destinationProperty.Type.TypeKind == TypeKind.Enum && sourceProperty.NullableAnnotation != NullableAnnotation.Annotated)
                    {
                        _indentWriter.WriteLine($"if (self.{destinationProperty.Name} != default)");
                        _indentWriter.WriteLine("{");
                        _indentWriter.Indent++;
                        _indentWriter.WriteLine($"target.{destinationProperty.Name} = self.{destinationProperty.Name}.MapToEnum<{$"global::{destinationProperty.Type.ContainingNamespace.Name}.{destinationProperty.Type.Name}"}>();");
                        _indentWriter.Indent--;
                        _indentWriter.WriteLine($"}}{Environment.NewLine}");
                    }
                    else if (sourceProperty.Type.IsByteArrayType())
                    {
                        _indentWriter.WriteLine($"if (self.{destinationProperty.Name}?.Length > 0)");
                        _indentWriter.WriteLine("{");
                        _indentWriter.Indent++;
                        _indentWriter.WriteLine($"target.{destinationProperty.Name} = self.{destinationProperty.Name}?.MapTo{destinationProperty.Type.Name}();");
                        _indentWriter.Indent--;
                        _indentWriter.WriteLine($"}}{Environment.NewLine}");
                    }
                    else if (sourceProperty.NullableAnnotation == NullableAnnotation.Annotated && _destination.GetMembers($"Has{destinationProperty.Name}").OfType<IPropertySymbol>().SingleOrDefault() != null)
                    {
                        _indentWriter.WriteLine($"if (self.{destinationProperty.Name}.HasValue)");
                        _indentWriter.WriteLine("{");
                        _indentWriter.Indent++;
                        _indentWriter.WriteLine($"target.{destinationProperty.Name} = self.{destinationProperty.Name}.Value;");
                        _indentWriter.Indent--;
                        _indentWriter.WriteLine($"}}{Environment.NewLine}");
                    }
                    else
                    {
                        var (s, t) = _targets.Where(e => e.HasValue).Select(e => e!.Value).Where(e => SymbolEqualityComparer.Default.Equals(sourceProperty.Type, e.source) && SymbolEqualityComparer.Default.Equals(destinationProperty.Type, e.destination)).Select(e => (e.source, e.destination)).FirstOrDefault();
                        if (s != null && t != null)
                        {

                            _indentWriter.WriteLine($"if (self.{destinationProperty.Name} != default)");
                            _indentWriter.WriteLine("{");
                            _indentWriter.Indent++;
                            var nullConditional = sourceProperty.Type.IsReferenceType || sourceProperty.NullableAnnotation == NullableAnnotation.Annotated ? "?" : string.Empty;
                            _indentWriter.WriteLine($"target.{destinationProperty.Name} = self.{destinationProperty.Name}.Map();");
                            _indentWriter.Indent--;
                            _indentWriter.WriteLine($"}}{Environment.NewLine}");
                        }
                        else
                        {
                            // TODO: diagnostics

                            _indentWriter.WriteLine($"// Can't map {sourceProperty.FullyQualifiedName()} to {destinationProperty.FullyQualifiedName()}.");
                        }
                    }
                }
            }
            else if (sourceProperty.IsEnumerableCollection())
            {
                List<(IPropertySymbol sourceProperty, IPropertySymbol destinationProperty)>? collections = new() { (sourceProperty, destinationProperty) };
                MapCollections(collections, _indentWriter, "target.", string.Empty);
            }
        }

        _indentWriter.WriteLine("return target;");

        _indentWriter.Indent--;
        _indentWriter.WriteLine("}");
    }

    private void BuildMapFromProtobufExtensionMethod(NamespaceGatherer namespaces, IMethodSymbol? constructor = null)
    {
        var fullyQualifiedSource = _source.FullyQualifiedName();
        var fullyQualifiedDestination = _destination.FullyQualifiedName();

        var parameters = new string[constructor == null ? 1 : constructor.Parameters.Length + 1];
        parameters[0] = $"this {fullyQualifiedSource} self";

        if (constructor == null)
        {
            _indentWriter.WriteLine($"public static {fullyQualifiedDestination} Map{(_mappingContext.LongName ? ($"To{_destination.Name}") : string.Empty)}(this {fullyQualifiedSource} self, {fullyQualifiedDestination} target)");
        }
        else
        {
            for (var i = 0; i < constructor.Parameters.Length; i++)
            {
                var parameter = constructor.Parameters[i];

                if (parameter.Type.ContainingNamespace != null)
                {
                    namespaces.Add(parameter.Type.ContainingNamespace);
                }

                var nullableAnnotation = parameter.NullableAnnotation == NullableAnnotation.Annotated ? "?" : string.Empty;
                var optionalValue = parameter.HasExplicitDefaultValue ? $" = {parameter.ExplicitDefaultValue.GetDefaultValue()}" : string.Empty;
                parameters[i + 1] = $"{parameter.Type.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat)}{nullableAnnotation} {parameter.Name}{optionalValue}";
            }

            _indentWriter.WriteLine($"public static {fullyQualifiedDestination} Map{(_mappingContext.LongName ? ($"To{_destination.Name}") : string.Empty)}({string.Join(", ", parameters)})");
        }

        _indentWriter.WriteLine("{");
        _indentWriter.Indent++;

        if (!_source.IsValueType)
        {
            if (constructor != null)
            {
                _indentWriter.WriteLine("var target = self is null ? throw new ArgumentNullException(nameof(self)) :");
                _indentWriter.Indent++;
            }

            namespaces.Add(typeof(ArgumentNullException));
        }
        else
        {
            _indentWriter.WriteLine($"if (target == null) throw new ArgumentNullException(nameof(target));{Environment.NewLine}");
        }

        _indentWriter.Indent++;

        if (constructor != null)
        {
            if (constructor.Parameters.Length == 0)
            {
                _indentWriter.WriteLine($"new {fullyQualifiedDestination}()");
            }
            else
            {
                _indentWriter.WriteLine(
                    $"new {fullyQualifiedDestination}({string.Join(", ", constructor.Parameters.Select(_ => _.Name))})");
            }

            _indentWriter.WriteLine("{");
        }

        List<(IPropertySymbol sourceProperty, IPropertySymbol destinationProperty)> optionals = new();
        List<(IPropertySymbol sourceProperty, IPropertySymbol destinationProperty)> collections = new();

        foreach (var destinationProperty in _destinationProperties)
        {
            if (_source.GetMembers(destinationProperty.Name).OfType<IPropertySymbol>().SingleOrDefault() is not IPropertySymbol sourceProperty)
            {
                // TODO: diagnostics
                continue;
            }

            if (_source.GetMembers($"Has{destinationProperty.Name}").OfType<IPropertySymbol>().SingleOrDefault() != null && destinationProperty.HasSetter())
            {
                optionals.Add((sourceProperty, destinationProperty));
            }
            else if (sourceProperty.IsEnumerableCollection() && destinationProperty.IsMutableCollection())
            {
                // Protobuf source is a collection that's not a string and we're not mapping it to a byte array
                collections.Add((sourceProperty, destinationProperty));
            }
            else
            {
                if (constructor != null)
                {
                    WritePropertyMapping(sourceProperty, destinationProperty, _indentWriter, string.Empty, $",{Environment.NewLine}");
                }
                else
                {
                    WritePropertyMapping(sourceProperty, destinationProperty, _indentWriter, "target.", $";{Environment.NewLine}");
                }
            }
        }

        if (constructor != null)
        {
            _indentWriter.WriteLine($"}};{Environment.NewLine}");
        }
        else
        {
            _indentWriter.Indent--;
        }

        //if (!_source.IsValueType)
        //{
        //    _indentWriter.Indent--;
        //}

        foreach (var (sourceProperty, destinationProperty) in optionals)
        {
            _indentWriter.WriteLine($"if (self.Has{destinationProperty.Name})");
            _indentWriter.WriteLine("{");
            _indentWriter.Indent++;

            WritePropertyMapping(sourceProperty, destinationProperty, _indentWriter, "target.", $";");

            _indentWriter.Indent--;
            _indentWriter.WriteLine($"}}{Environment.NewLine}");
        }

        MapCollections(collections, _indentWriter, "target.", string.Empty);

        _indentWriter.WriteLine("return target;");

        _indentWriter.Indent--;
        _indentWriter.WriteLine($"}}{Environment.NewLine}");
    }

    private void WritePropertyMapping(IPropertySymbol sourceProperty, IPropertySymbol destinationProperty, IndentedTextWriter _indentWriter, string prefix, string postfix)
    {
        string? methodName;

        if (sourceProperty.IsEnumerableCollection() && destinationProperty.IsMutableCollection())
        {
            List<(IPropertySymbol sourceProperty, IPropertySymbol destinationProperty)>? collections = new() { (sourceProperty, destinationProperty) };
            MapCollections(collections, _indentWriter, "target.", string.Empty);
        }
        else if (destinationProperty.HasSetter())
        {
            var nullConditional = sourceProperty.Type.IsReferenceType || sourceProperty.NullableAnnotation == NullableAnnotation.Annotated ? "?" : string.Empty;

            if (sourceProperty.Type.IsAssignableTo(destinationProperty.Type))
            {
                _indentWriter.WriteLine($"{prefix}{destinationProperty.Name} = self.{destinationProperty.Name}{postfix}");
            }
            else if ((methodName = sourceProperty.GetConversionMethod(destinationProperty)) != null)
            {
                _indentWriter.WriteLine($"{prefix}{destinationProperty.Name} = self.{destinationProperty.Name}.{methodName}(){postfix}");
            }
            else if (destinationProperty.Type.TypeKind == TypeKind.Enum)
            {
                _indentWriter.WriteLine($"{prefix}{destinationProperty.Name} = self.{destinationProperty.Name}.MapToEnum<{$"global::{destinationProperty.Type.ContainingNamespace.Name}.{destinationProperty.Type.Name}"}>(){postfix}");
            }
            else if (!sourceProperty.IsEnumerableCollection())
            {
                var (s, t) = _targets.Where(e => e.HasValue).Select(e => e!.Value).Where(e => SymbolEqualityComparer.Default.Equals(sourceProperty.Type, e.source) && SymbolEqualityComparer.Default.Equals(destinationProperty.Type, e.destination)).Select(e => (e.source, e.destination)).FirstOrDefault();
                if (s != null && t != null)
                {
                    _indentWriter.WriteLine($"{prefix}{destinationProperty.Name} = self.{destinationProperty.Name}{nullConditional}.Map(){postfix}");
                }
                else
                {
                    // TODO: diagnostics

                    _indentWriter.WriteLine($"// Can't map {sourceProperty.FullyQualifiedName()} to {destinationProperty.FullyQualifiedName()}.");
                }
            }
            else
            {
                // TODO: diagnostics

                _indentWriter.WriteLine($"// Can't map {sourceProperty.FullyQualifiedName()} to {destinationProperty.FullyQualifiedName()}.");
            }
        }
        else
        {
            // TODO: diagnostics

            _indentWriter.WriteLine($"// Can't map {sourceProperty.FullyQualifiedName()} to {destinationProperty.FullyQualifiedName()}.");
        }
    }

    private void MapCollections(List<(IPropertySymbol sourceProperty, IPropertySymbol destinationProperty)> collections, IndentedTextWriter _indentWriter, string prefix, string postfix)
    {
        foreach (var (sourceProperty, destinationProperty) in collections)
        {
            var sourceType = sourceProperty.GetCollectionType();
            var destinationType = destinationProperty.GetCollectionType();

            if (sourceType != null && destinationType != null)
            {
                WriteCollectionElementMapping(sourceProperty, destinationProperty, sourceType, destinationType, _indentWriter, prefix, postfix);
            }
        }
    }

    private void WriteCollectionElementMapping(IPropertySymbol sourceProperty, IPropertySymbol destinationProperty, ITypeSymbol sourceTypeSymbol, ITypeSymbol destinationTypeSymbol, IndentedTextWriter _indentWriter, string prefix, string postfix)
    {
        string? methodName;

        if (_compilation.ClassifyCommonConversion(sourceTypeSymbol, destinationTypeSymbol).IsImplicit)
        {
            _indentWriter.WriteLine($"foreach(var e in self.{sourceProperty.Name})");
            _indentWriter.WriteLine("{");
            _indentWriter.Indent++;
            _indentWriter.WriteLine($"{prefix}{destinationProperty.Name}.Add(e);");
            _indentWriter.Indent--;
            _indentWriter.WriteLine($"}}{Environment.NewLine}");
        }
        else if ((methodName = sourceProperty.GetConversionMethod(destinationProperty)) != null)
        {
            _indentWriter.WriteLine($"foreach(var e in {prefix}{sourceProperty}");
            _indentWriter.WriteLine("{");
            _indentWriter.Indent++;
            _indentWriter.WriteLine($"{destinationProperty}.Add(e.{methodName}());");
            _indentWriter.Indent--;
            _indentWriter.WriteLine("}");
        }
        else if (destinationTypeSymbol.TypeKind == TypeKind.Enum)
        {
            _indentWriter.WriteLine($"foreach(var e in self.{sourceProperty.Name})");
            _indentWriter.WriteLine("{");
            _indentWriter.Indent++;
            var ss = $"{prefix}{destinationProperty.Name}.Add(e.MapToEnum<{$"global::{destinationProperty.ContainingNamespace.ToDisplayString()}.{destinationTypeSymbol.Name}"}>());";
            _indentWriter.WriteLine($"{prefix}{destinationProperty.Name}.Add(e.MapToEnum<{$"global::{destinationProperty.ContainingNamespace.ToDisplayString()}.{destinationTypeSymbol.Name}"}>());");
            _indentWriter.Indent--;
            _indentWriter.WriteLine($"}}{Environment.NewLine}");
        }
        else
        {
            var (s, t) = _targets.Where(e => e.HasValue).Select(e => e!.Value).Where(e => SymbolEqualityComparer.Default.Equals(sourceTypeSymbol, e.source) && SymbolEqualityComparer.Default.Equals(destinationTypeSymbol, e.destination)).Select(e => (e.source, e.destination)).FirstOrDefault();
            if (s != null && t != null)
            {
                var imessage = _compilation.GetTypeByMetadataName("Google.Protobuf.IMessage");
                var isProtobufSource = imessage != null && _compilation.ClassifyCommonConversion(s, imessage).IsImplicit;
                var isProtobufTarget = imessage != null && _compilation.ClassifyCommonConversion(t, imessage).IsImplicit;
                var fn = isProtobufSource ? "Map" : isProtobufTarget ? "Map" : "Map";

                _indentWriter.WriteLine($"foreach(var e in self.{sourceProperty.Name})");
                _indentWriter.WriteLine("{");
                _indentWriter.Indent++;
                _indentWriter.WriteLine($"{prefix}{destinationProperty.Name}.Add(e.{fn}());");
                _indentWriter.Indent--;
                _indentWriter.WriteLine($"}}{Environment.NewLine}");
            }
            else
            {
                // TODO: diagnostics

                _indentWriter.WriteLine($"// Can't map {sourceProperty.FullyQualifiedName()} to {destinationProperty.FullyQualifiedName()}.");
            }
        }
    }

    public void Dispose()
    {
        _indentWriter.Dispose();
        _writer.Dispose();
    }
}
